<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络 on 且徐行</title>
    <link>https://blog.cc1234.cc/tags/%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 网络 on 且徐行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 30 Aug 2019 13:58:06 +0800</lastBuildDate><atom:link href="https://blog.cc1234.cc/tags/%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>简单聊聊TCP的可靠性</title>
      <link>https://blog.cc1234.cc/posts/tcp-reliability/</link>
      <pubDate>Fri, 30 Aug 2019 13:58:06 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/tcp-reliability/</guid>
      <description>前言 传输控制协议（缩写：TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由 IETF 的 RFC 793 定义。
TCP 在不可靠的 IP 协议之上实现了可靠性， 从而使得我们不必再去关注网络传输中的种种复杂性，所谓的可靠就是让我们去信任它即可。
信任归信任，可我们还是的得去了解它，知道它为何值得信任，信任主要体现在哪些方面，换句话说就是
TCP的可靠性是什么 TCP如何实现的可靠性 上面的问题就是本文讨论的核心点
TCP 的可靠性实则是一个很大的话题，很多细节都值得深究，由于本人水平有限，文中很多描述都没有深入甚至可能有错误，读者若有不同观点，尽可提出。
什么是可靠性 其实在 RFC 793 的 1.5 Operation 专门对 Reliability （可靠性）做了说明。
总结下来如下
确保一个进程从其接收缓存中读出的数据流是无损坏，无间隔，非冗余和按序的数据流；即字节流与连接的另一方端系统发送出的字节流是完全相同的
需要解决的问题 前面说到的可靠性，提到了无损坏，无间隔，非冗余和按序等几个关键词， 而在网络中要实现这些指标，我们都有对应的问题需要去解决。
其中最典型的几个问题如下
干扰
网络的干扰可能是因为硬件故障导致数据包受到破坏， 也有可能是网络波动导致数据包的某些 bit 位产生了变化
题外话：这里的干扰并不包含恶意攻击，恶意攻击是属于传输安全的范畴了，比如我们熟知的 SSL/TLS 就是一个成熟的网络传输安全问题的解决方案
如下图，发送的 111 由于干扰变成了 101
乱序
发送方连续先后发送两个数据包， 后发送的数据包可能先到达接收方，如果接收方按接收顺序处理数据包，这就会导致接收的数据包与发送的数据包不一致。
造成这样的原因是因为每一个数据包都会根据当时的网络情况选择不同的路由进行传输， 就像多个人开车从上海到北京有很多路线可选，不一定先出发就能先到（我没去过北京，请不要杠我&amp;hellip;&amp;hellip;）
如下图，发送方顺序发送了 A -&amp;gt; B -&amp;gt; C 三个数据包， 然而接收方可能是以 A -&amp;gt; C -&amp;gt; B 这样的顺序接收的报文，很明显 B 和 C 两个个报文的顺序不符合期望，产生了乱序
丢包</description>
    </item>
    
    <item>
      <title>TCP之TCP_NODELAY</title>
      <link>https://blog.cc1234.cc/posts/tcp-nodelay/</link>
      <pubDate>Tue, 26 Mar 2019 14:08:06 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/tcp-nodelay/</guid>
      <description>0X00 前言 我们在使用socket（TCP）进行编程时会有很多配置选项, 而TCP_NODEPLAY也正是其中之一， 本文的目的就是研究TCP_NODELAY产生的效果以及其背后的原理。
0X01 TCP_DELAY与Nagle TCP_NODELAY的值为0或1（在有的语言中为true或false）， 当设置为1（true)时即代表着关闭Nagle算法， 反之则代表打开Nagle算法。
Nagle算法由John Nagle发明， 该算法旨在通过减少发送网络包的数量从而提升网络的性能。
那么它是如何减少发送的包数量的呢， 这又得了解作者描述的一个问题 &amp;ndash; “小数据包问题”：
应用不断的提交小单为的数据， 经常只有1byte大小，而为了发送这1byte的数据， 还需要传输40byte的数据首部包(TCP首部 20byte + IPV4首部 20byte), 从而对网络造成了巨大的开销
为了解决这个问题，Nagle算法就应运而生了， 下面是该算法的伪码
# MSS代表最大分段大小， 可以理解为TCP愿意接受的数据的字节数最大值 # the window size代表接收窗口的大小 if there is new data to send if the window size &amp;gt;= MSS and available data is &amp;gt;= MSS send complete MSS segment now else # 如果存在未被确认的数据 if there is unconfirmed data still in the pipe # 将该数据加入缓冲， 当接收方一个确认保文返回时就发送该缓冲内的数据 enqueue data in the buffer until an acknowledge is received else send data immediately end if end if end if 我们主要关注Nagle算法对数据合并的方式和时机，以及发送合并数据的时机， 参考下图</description>
    </item>
    
  </channel>
</rss>
