<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JVM on 且徐行</title>
    <link>https://blog.cc1234.cc/tags/jvm/</link>
    <description>Recent content in JVM on 且徐行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Feb 2021 23:45:00 +0800</lastBuildDate><atom:link href="https://blog.cc1234.cc/tags/jvm/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>  你知道 Java 的偏向锁要被废弃掉了吗？ </title>
      <link>https://blog.cc1234.cc/posts/java-biased-locking/</link>
      <pubDate>Mon, 01 Feb 2021 23:45:00 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/java-biased-locking/</guid>
      <description>前言 偏向锁是从 JDK1.6 引入的一种针对 synchronized 的锁优化技术，然而从 JDK 15 开始，这一特性被官方标记为废弃状态，如果还想继续使用的话需要通过 JVM 参数手动启用。
-XX:+UseBiasedLocking 那么问题来了，JDK15 为什么要废弃偏向锁呢？
什么是偏向锁？ 在回答 Why 之前要先明白 What：什么是偏向锁？
在 Java 中可以使用 synchronized 来保证代码块同一时间只被一个线程访问（互斥），它是基于 Monitor Object 模式来实现的。
int i; public synchronized void mutex() { i++; } public void mutext2() { synchronized(this) { i++; } } 当线程请求进入临界区时都需要先获取一个 monitor 对象（类似于准入许可证），获取 monitor 对象是通过 compare-and-swap (CAS) 操作来实现的。
从 CPU 的角度来看，CAS 其实是一个开销很昂贵的操作，有没有什么方法可以避免呢？
我们先看一个 JAVA 团队观察到的现象：
 在大多数对象的生命周期内，基本上只会有一个线程访问临界区
 基于此可以得出一个优化方案：当某个线程首次访问临界区时记录下该线程的信息，当再有线程访问该临界区时判断是否是首次访问的线程
 如果是：就直接放行，这样就避免了通过 CAS 获取 monitor 的操作 如果不是：就升级为轻量级锁  这个优化方案其实就是偏向锁了，在 JVM 的实际实现中，锁升级其实有 4 个状态，并且是只可升级不可降级。</description>
    </item>
    
  </channel>
</rss>
