<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>开源 on 且徐行</title>
    <link>https://blog.cc1234.cc/tags/%E5%BC%80%E6%BA%90/</link>
    <description>Recent content in 开源 on 且徐行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Feb 2022 16:01:02 +0800</lastBuildDate><atom:link href="https://blog.cc1234.cc/tags/%E5%BC%80%E6%BA%90/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>再也不用手写模型文档了，Databasir beta 初体验</title>
      <link>https://blog.cc1234.cc/posts/databasir-beta-experience/</link>
      <pubDate>Fri, 11 Feb 2022 16:01:02 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/databasir-beta-experience/</guid>
      <description>背景 文档在软件开发流程中扮演着重要的角色，它用于描述软件的功能、设计，是软件能持续演进的重要组成部分，可是由于软件和文档各自都需要独立维护，这就经常导致软件已经迭代到了 C 版本，但是文档却还停留在 A 版本。
那有没有什么办法能让软件迭代更新的同时，文档也自动更新呢？
答案当然是肯定的，业界的 swagger、yapi 等工具，它们就可以基于软件当前的版本生成最新的 API 文档。
可惜除了 API 文档以外，程序员经常还需要写数据库模型文档，那么这一块有没有对应的工具可用呢？
screw 算是一个解决方案，不过它主要解决的是数据库模型文档生成的问题，在文档管理能力方面还属于空白状态，为了填补这一块空白，Databasir 就诞生了。
 项目地址：https://github.com/vran-dev/databasir
 简介 Databasir 旨在解决数据库文档的管理问题，主要包含以下功能
 支持 mysql、postgresql 等常用数据库（理论拥有 JDBC 驱动的数据库都能支持） 自动或手动同步数据库 Schema 并生成文档 数据库历史版本文档查看 支持 markdown 等格式导出 扁平化的权限管理模式，团队管理、成员管理一应俱全 关注数据库安全，密码加密存储，并且不会再返回前端 &amp;hellip;&amp;hellip;  项目地址：
 Github：https://github.com/vran-dev/databasir  项目预览：
安装 Databasir 规划了以下安装方式
 Jar docker（TODO） docker compose（TODO)  目前 Jar 安装方式已经可用，而 Docker 和 Docker-Compose 的安装方式还在开发中。
接下来就演示一下通过 Jar 模式来部署 Databasir，更多细节也可以参考 Github 文档 。
通过 Jar 部署的话，对系统环境有一定要求，需要有以下依赖</description>
    </item>
    
    <item>
      <title>一介小白的开源随笔</title>
      <link>https://blog.cc1234.cc/posts/essay-about-my-open-source/</link>
      <pubDate>Wed, 26 May 2021 21:47:01 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/essay-about-my-open-source/</guid>
      <description>[埃里克·雷蒙] 在其著作《大教堂和市集》里面探讨黑客社区与自由软件原则， 这可以算做是开源文化的启蒙。
时至今日已过去 20 多年了，虽然开源的定义在不断的演化，但是自由和社区仍然是它的基因。
我忘了我接触开源有多久了（两三年？亦或三四年？），但我认真的发起和参与却是最近一年，这段经历让我对开源产生了不同的认知，甚至也改变了我对软件研发的一些认知。
难得矫情一次，就做一个随笔，写写自己在开源路上的一些心路历程。
 如果你想了解我的开源项目，可以通过最后附录中的 PrettyZoo 链接跳转
 开源与梦想 我只知道刚接触开源的时候，就被这种文化给深深的吸引着，也许人的天性就向往自由吧。
看着那些知名开源项目的主页，幻想着自己也是某个上千 star 项目的 owner，Github 的主页打开就是 lü 油油的一大片。
对，就像下面这样
那时候也还年轻，愿意为此做出尝试和努力，断断续续的参与了一些知名开源项目的边边角角，不过最终还是没有坚持下去。
再后来就逐渐遗忘了这件事情，在时间面前，它终是蒙上了一秒又一秒的尘&amp;hellip;&amp;hellip;
要不是突然的一阵风吹开了这已被尘封的梦想，我大概也不知道我竟然也成了曾经梦想成为的样子：一个上千 star 项目的 owner , github 主页是 lü 油油的一大片
 All good things come to those who wait
 开源与开源 开源既可以只是开放源代码，也可以不止是开放源代码，而这两个解读也恰好是我做开源经历的两个阶段。
最开始我也是把项目的源码放在 github 上就不管了，这就像把商品放在一个公共陈列柜里一样，不管有人看或不看，用或不用，我自佛系。
后来我逐渐理解到开源其实可以不止是开放源代码，开始尝试以更多的角色去做开源
 作为项目研发：去解决 bug，开发新的功能，技术可行性调查，系统架构设计等 作为项目运营：去写文档，处理社区 issue，去各个平台做推广，关注反馈等 作为项目 owner ： 去挖掘用户需求，思考交互设计，绘制功能原型，规划迭代等 &amp;hellip;&amp;hellip;  这样一种对开源的认知改变带来的变化非常直观的体现在了项目的各项数据上，比如 star 数， 最开始一年都是不温不火，后面就开始有了明显的增长
社区的 issue 数量也有着类似的增长曲线
这种感觉就像自己开始创业了，但整个公司就我一人，包揽全职。
开源与生活 在有限的时间面前，投入在开源上多一分钟，那么生活就会被压缩一分钟。</description>
    </item>
    
  </channel>
</rss>
