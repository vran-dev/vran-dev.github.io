<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>LeetCode on 且徐行</title>
    <link>https://blog.cc1234.cc/tags/leetcode/</link>
    <description>Recent content in LeetCode on 且徐行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.cc1234.cc/tags/leetcode/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LeetCode-33-Search in rotated sorted array</title>
      <link>https://blog.cc1234.cc/posts/leetcode-33/</link>
      <pubDate>Fri, 11 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/leetcode-33/</guid>
      <description>题意 假设有一个按升序排列的数组， 现在将其从中间某个位置（未知）将其分成两部分，并交换位置
原数组：[0,1,3,5,6,7,8] 将其分为两部分，索引&amp;lt;4 算一部分， 剩余的为第二部分 将其旋转后得到 [6,7,8,0,1,3,5] 现在你需要在这个旋转后的数组种找寻是否有输入的一个目标值， 如果有就返回它在数组中的索引位置，否则返回-1.
约束条件：
数组中的值都是不重复的 算法的时间复杂度必须是O(logN) 思路 注意理解两个约束条件（很重要）， 第二个条件要求时间复杂度必须是O(logN), 而在数组查找问题中看见O(logN)我们一般会想到二分查找法（又叫折半查找法）
但是二分查找要求整个输入必须是有序的， 而我们这个输入明显不符合要求。
二分查找一次排除一半的结果集，这是因为能确定结果不在其中，根据这个思路我们还是有希望用二分查找解决这个问题的。
但是我们得先分析旋转后的数组情况， 以便找出一定的规律每次去排除一半的结果集
首先根据题意， 我们得知输入数组最开始是升序的， 只不过要经历一次旋转， 而旋转的位置是未知的。
如果我们给定的旋转位置比0还小的话， 这样数组就不会变化，结构如下图，即 x~y 为升序, 这种情况用正常的二分查找就能解决问题了。
分析 如果给定的旋转位置&amp;gt;=0并且合法，那么数组会被我们分成A,B两部分， 这就会存在以下两种情况
A.length &amp;gt; B.length A.length &amp;lt;= B.length 下面用图来说明这两种情况， 在图中蓝色区域为A, 红色区域为B
先看第一种情况: A.length &amp;gt; B.length
这种情况下
x &amp;lt; m, n &amp;lt; y, m &amp;lt; n, x &amp;lt; y; 这种情况下使用二分查找计算得到的中间位置midle就落在蓝色区域内
如果 array[midle] &amp;lt; target : 红色部分肯定小于array[midle] , 而midle～y为升序， 我们就能确定值在 middle + 1 ~ y之间</description>
    </item>
    
  </channel>
</rss>
