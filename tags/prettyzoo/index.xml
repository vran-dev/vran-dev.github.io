<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>PrettyZoo on 且徐行</title>
    <link>https://blog.cc1234.cc/tags/prettyzoo/</link>
    <description>Recent content in PrettyZoo on 且徐行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 20 Nov 2022 14:00:43 +0800</lastBuildDate><atom:link href="https://blog.cc1234.cc/tags/prettyzoo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PrettyZoo 2.0 重大更新，支持暗黑模式</title>
      <link>https://blog.cc1234.cc/posts/prettyzoo-2/</link>
      <pubDate>Sun, 20 Nov 2022 14:00:43 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/prettyzoo-2/</guid>
      <description>前言 PrettyZoo 有一段时间没有发布新版本了，一个是因为功能基本能满足 90% 的使用场景，另一个是因为我个人最近这段时间的事情也比较多。
这两天因为身体的一些运动损伤导致只能宅家休息，借此机会就将历史问题修复了一番，整个 UI 也做了大的改造
新特性概览  全新的 UI 设计 支持暗黑模式 支持配置 zookeeper 连接超时时间 支持配置 zookeeper 系统环境变量 支持手动检测版本更新 其他历史遗留 bug 修复  全新的 UI 设计 这个版本将大部分 UI 都进行了重新设计，采用了更简洁的元素展示
SSH Tunnel 的表单默认会隐藏，只有在需要配置的情况下才会展示，减少了不必要的信息干扰
菜单的 UI 也做了统一的风格设计
重连会有明显的动态指示
暗黑模式 由于 PrettyZoo 默认采用的是白色主题，对眼睛的刺激表较大，为此这个版本特地增加了暗黑模式，为保护眼睛作出努力
连接超时时间配置 最开始社区经常会有用户反馈 zk 连接超时，我就将默认超时时间加到了 6s，在这个版本我将超时时间的控制权完全放给了用户
目前支持配置
 连接超时时间 会话超时时间 重试间隔时间 最大重试次数  zookeeper 系统环境变量 zookeeper 有不少配置是通过环境变量来设置的，比如 jute.buffer ，在上个版本提供了加载指定目录下的 zookeeper.properties 的解决方案，这个版本再进一步：支持直接在客户端配置
版本更新检测 老版的版本更新检测实在是太简陋了，新版做了重新设计，用户可以主动点击检测更新
如果有新版本，点击 icon 即可查看新版本特性，在弹出的对话框点击 YES 即可跳转到软件下载页面
其他 除了以上的新特性外，这个版本还修复了不少历史 BUG，在此就不一一列举了，如果有兴趣可以到 Release 页面下载体验</description>
    </item>
    
    <item>
      <title>推荐一款颜值与功能双在线的 Zookeeper 可视化工具</title>
      <link>https://blog.cc1234.cc/posts/prettyzoo-tutorials/</link>
      <pubDate>Wed, 24 Feb 2021 15:50:43 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/prettyzoo-tutorials/</guid>
      <description>前言 虽然市面上 Zookeeper 的 WEB 管理工具很丰富，但是却很难找到一款满意的图形化客户端。
鉴于这样的情况，我就自己开发了一款用于管理 Zookeeper 的图形化工具，取名 PrettyZoo，意为：Pretty nice Zookeeper GUI。
PrettyZoo 是一个基于 JavaFX 和 Apache Curator 实现的 Zookeeper 图形化工具，该项目完全开源，可以通过 Github 主页查看。
它拥有众多个性化的功能，比如
 支持 Mac / WIndows / Linux 多平台 支持 SSH-Tunnel 连接 节点 CRUD （增删改查） 节点数据 pretty format，目前支持 JSON、XML 支持命令行操作（80% 的命令都支持了） 支持 4-letter command &amp;hellip;&amp;hellip;  下面多图预警
安装 得益于 Java 的跨平台特性， PrettyZoo 天然就支持 Windows / Mac / Linux 等多平台，再加上使用了 Jigsaw（模块化） 和 JPackage 等众多新特性，用户无需再独立安装 JRE 即可运行。
安装包的下载地址（可能需要梯子）, 记得选择系统匹配的安装包</description>
    </item>
    
    <item>
      <title>我是如何开发了一款‘有人用’的开源软件</title>
      <link>https://blog.cc1234.cc/posts/how-to-develop-prettyzoo/</link>
      <pubDate>Sun, 22 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/how-to-develop-prettyzoo/</guid>
      <description>背景 PrettyZoo 是在去年国庆（2019 年）时开发的一个用于管理 Zookeeper 的桌面图形化工具，当时是因为在学习 Elastic-Job-Lite 框架的源码时涉及到了 Zookeeper，想着借助图形化工具去更直观的了解整个框架的设计，但在市面上却找不到一款符合自己期望的产品，那就只能自己动手丰衣足食了，这算是 PrettyZoo 诞生的初衷了。
其实我已经写过一篇文章来简单介绍过这个产品的研发历程（从 Java8 到 Java11 ： PrettyZoo 开发回顾（模块化在 GUI 中的实践））, 不过那篇文章主要侧重于产品的技术演进过程，这一篇文章是基于国庆重构后的全新版本来写的，记录了自己在这个重构的过程中各个阶段所做的事情，主要包括以下内容
 需求分析 原型设计 技术选型 架构设计 成品展示  需求分析 上一节的背景描述了我为什么要开发这样一款软件，而这一节的主要内容则是分析我想要开发的软件应该有的功能点。
该产品是用于管理 Zookeeper 数据，那么需求其实也需要围绕着 Zookeeper 的功能来分析，这就像为人作肖像画一样，得先去分析目标的特性。
我将分析后的需求整理成了下面的一个表格，并对功能的优先级、必要性做了标注
   需求 优先级 是否必须     连接创建 高 √   连接删除 高 √   节点展示 高 √   节点创建 高 √   节点删除 高 √   节点数据更新 高 √   递归操作支持 中 √   节点数据格式化（JSON、YAML） 低 ×   SSH Tunnel 支持 中 ×   ACL 支持 中 √   配置导入/导出 中 ×         当然实际的产品开发中还会去调查类同类产品，去参考它们的功能、设计等， 这方面我就略过了。</description>
    </item>
    
    <item>
      <title>从 Java8 到 Java11 ： PrettyZoo 开发回顾（模块化在 GUI 中的实践）</title>
      <link>https://blog.cc1234.cc/posts/java-gui-experience/</link>
      <pubDate>Sun, 12 Apr 2020 12:30:37 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/java-gui-experience/</guid>
      <description>起因 elastic-job-lite 是公司使用的一款定时任务调度框架，该框架将所有的任务调度信息都注册进了 zookeeper 中。
为了方便定位相关的问题，我去网上搜了 zookeeper 相关的图形化客户端，结果没有一款符合自己的需求，于是就干脆自己写一个算了。
 该客户端是去年国庆假期写的，经历了从 Java8 到 Java11 的重构（主要是模块化），该文章主要是对整个过程的一个回顾
 从需求分析到实现 面向用户：zookeeper 用户
软件名称：PrettyZoo
功能：
 节点 CRUD 节点实时同步  交互与原型：
交互分两部，第一步启动页面要求用户输入 zookeeper 的服务地址，连接成功后会跳到节点操作页面
​	技术方案：
 语言采用 Java UI 框架采用 Swing 采用传统的分层架构 Zookeeper Client 采用 Apache Curator  最终实现：
不足：
 受限于交互流程，一次只能管理一个 zookeeper server 由于是 Java8，运行需要安装额外的 JRE（或 JDK），影响了受众面 颜值不足 工程质量方面，架构分层不清晰，导致层与层之间相互渗透，随时膨胀为一个 Big Bom  界面与架构的重构规划 重构主要是为了解决上一版的不足，而第一步就是分析产生这些问题的根本原因，再提出对应的解决方案
  一次只能管理一个 server
这是因为交互和设计上导致的，要解决该问题需要重新思考交互和软件的布局。
经过网上的调研，最终决定采用 “三栏布局”，即解决了以前交互模式的分割感，又满足了一次性管理多个 server 的需求。</description>
    </item>
    
  </channel>
</rss>
