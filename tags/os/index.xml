<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>OS on 且徐行</title>
    <link>https://blog.cc1234.cc/tags/os/</link>
    <description>Recent content in OS on 且徐行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 23 Jul 2019 23:34:06 +0800</lastBuildDate><atom:link href="https://blog.cc1234.cc/tags/os/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>带你破案：文件描述符到底是什么？</title>
      <link>https://blog.cc1234.cc/posts/file-descriptor/</link>
      <pubDate>Tue, 23 Jul 2019 23:34:06 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/file-descriptor/</guid>
      <description>前言 文件描述符在unix系统中几乎无处不在
网络接口 select、poll、epoll 涉及到文件描述符 IO接口 read、write 也涉及到文件描述符 从形式上来看文件描述就是一个整数，那么我们可不可以更进一步去了解一下呢？
本文打算通过一步一步实验去了解文件描述符到底是什么， 并在最后通过Linux内核相关的源码进行验证。
一个获取文件描述符的实例 我们可以通过 open 系统调用得到一个指定文件的文件描述符。
open 函数需要传入一个文件路径和操作模式， 调用会返回一个整型的文件描述符， 具体方法签名如下
/** * path 代表文件路径 * oflag 代表文件的打开模式，比如读，写等 */ int open(char *path, int oflag, ...) 我们写一段简单的代码来验证一下
#include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;fcntl.h&amp;gt; int main(int argc, char* argv[]) { // 以只读模式打开 demo.txt 文件 int fd = open(&amp;#34;demo.txt&amp;#34;, O_RDONLY); if (fd == -1) { perror(&amp;#34;open demo.txt error\n&amp;#34;); return EXIT_FAILURE; } // 打印获取到的文件描述符 printf(&amp;#34;demo.txt fd = %d \n&amp;#34;, fd); return EXIT_SUCCESS; } 然后使用 GCC 编译，执行编译后的程序，我们就可以得到 demo.</description>
    </item>
    
    <item>
      <title>操作系统之保护模式简谈</title>
      <link>https://blog.cc1234.cc/posts/os-protect-mode/</link>
      <pubDate>Sun, 30 Dec 2018 18:08:06 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/os-protect-mode/</guid>
      <description>前言 如果你想学习或者自己尝试写一个操作系统内核，保护模式是你绕不开的一个话题。
这篇文章的主要目的是让你了解保护模式个东西，以及它的作用。
不会涉及到如何进入保护模式，以及保护模式的一些细节我也会有意略过，
希望你在读这篇文章的时候，能了解计算机的组成， 对CPU的寄存器体系有一定的了解。
历史 保护模式是CPU的一种运行模式，出现在80286及之后的X86架构的CPU下。
这里说的CPU运行模式主要体现在CPU在内存寻址的区别。
在80286之前只有一种运行模式， 由于保护模式和这种模式有非常大的区别， 为了便于区分，便将以前的运行模式称之为实模式， CPU默认是工作在实模式下的。
实模式 最开始的8086最大寻址空间为1MB(即2^20), 但是8086的内部寄存器只有16位，那么如何能够做到1MB的内存寻址呢？Intel采用了以下的方式
内存地址 = 16位段寄存器 &amp;laquo; 4 + 16位通用寄存器保存的地址偏移
这样也会出现一个问题：即最终计算的内存地址会大于2^20 , 此时回产生内存回卷
回卷就是把溢出的最高位1和低16位做加法运算。例如：原本是（1）0100101011000001，回卷就是0100101011000001+1=0100101011000010
这个就是CPU默认的运行模式&amp;ndash;实模式的最大特点了。
保护模式 80286之后出现的保护模式，不仅仅改变了内存的寻址方式，还增加了存储器保护，标签页系统以及硬件支持的虚拟内存等特性。
为了兼容， 该模式默认是关闭的， 要由程序（通常是系统内核）主动切换。
为什么要有保护模式呢？因为80286的内存寻址空间达到16MB， 而80386更是达到了4GB, 实模式没法满足寻址的要求了。
下面我们就来讲一下保护模式是如何实现以上特性的。
在我们切换到保护模式之前我们要准备一个数据结构**全局描述符表， 它的本质是一个数组， 数组中的每一个元素称为全局描述符**， 这是一个64位的数据结构。
数据结构看着有点怪是不是？这其实是历史原因
全局描述符包含可访问的内存的基址， 最大长度， 以及其他的一些权限位。
这个全局描述符的地址被放在了一个称之为 GDTR的寄存器中
现在的段寄存器存储的就是全局描述符表的索引， 我们一般称之为段选择子
实际上段选择子的高13位存储的是索引， 低3位用来存储和权限相关的bit, 可以参考下图
这样的话我们的寻址方式就变成了以下流程了
从GDTR取得全局描述符表的地址 从段选择子取得索引 idx， 然后用 idx * 64 + 全局描述符的地址 得到 一个全局描述符的地址（前面我们讲过一个描述符是64bit的数据结构） 从全局描述符我们可以拿到内存的BaseAddress, 用BaseAddress + 16位通用寄存器的偏移 就可以得到最终的物理内存地址 注意， 我有意跳过了相关的权限检查的流程， 参考下图(目前得到的线性地址-Linear address 就是物理内存地址)</description>
    </item>
    
  </channel>
</rss>
