<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mybatis on 且徐行</title>
    <link>https://blog.cc1234.cc/tags/mybatis/</link>
    <description>Recent content in Mybatis on 且徐行</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 09 Sep 2021 21:41:39 +0800</lastBuildDate><atom:link href="https://blog.cc1234.cc/tags/mybatis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>纵享丝滑，Mybatis Generator 代码持续生成实践</title>
      <link>https://blog.cc1234.cc/posts/mybatis-and-generator/</link>
      <pubDate>Thu, 09 Sep 2021 21:41:39 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/mybatis-and-generator/</guid>
      <description>前言 Mybatis Generator 是与 Mybatis 配套的代码生成工具，它可以基于 Database 的元数据自动生成实体、Java Mapper 以及 XML 等 Boilerplate code。
但目前很多实践都只是在项目初期使用该工具，后面由于文件冲突、功能扩展等原因都不会再使用它生成代码，这种不可持续性让 Mybatis Generator 的价值大打折扣。
本文则分享了我的一些实践和尝试，让 Mybatis Generator 的代码生成在项目的全生命周期内得以持续，希望能为你带来一些灵感。
项目源码请通过 Github 查看。
目标 我期望的是只要每次数据库有变动都可以使用 Mybatis Generator 来生成代码，而不仅仅是项目首次初始化使用。要实现这样的目标就得解决代码重复生成时可能引入冲突，生成的代码功能不满足需求等问题。
也就是说项目得有以下几个特性
 隔离：自动生成的代码能够以某种形式与手写的代码隔离 扩展性：用户不需要（也不允许）去修改生成的代码  可以修改代码生成的规则，比如通过修改配置或扩展代码生成工具等 能够以某种非侵入性的方式去扩展生成的代码的功能   一致性：生成的代码结构只和项目有关，而不会受系统环境、构建工具等外部依赖的影响  接下来就正式开始尝试把
集成 Gradle 由于 Mybatis Generator 官方没有提供 Gradle Plugin，所以我选择了通过社区开源的 Gradle 插件 Mybatis Generator Plugin 来集成。
集成方式很简单，首先需要在 build.gradle 中引入一下插件，并配置指定的版本
plugins { id &amp;#34;com.thinkimi.gradle.MybatisGenerator&amp;#34; version &amp;#34;2.3&amp;#34; } 刷新完 Gradle 以后，我们就可以在 build.gradle 中通过 mybatisGenerator 块来配置运行时依赖的 JDBC 驱动、mybatis-generator-core 的版本以及代码生成的规则文件</description>
    </item>
    
    <item>
      <title>纵享丝滑，Mybatis-Dynamic-Sql 集成体验</title>
      <link>https://blog.cc1234.cc/posts/mybats-dynamic-sql-integration/</link>
      <pubDate>Thu, 02 Sep 2021 22:20:44 +0800</pubDate>
      
      <guid>https://blog.cc1234.cc/posts/mybats-dynamic-sql-integration/</guid>
      <description>前言 我大概两三年没有使用过 Mybatis 了，最近因为项目的原因重新开始使用 Mybatis，体验上总感觉不丝滑，即使加了 Mybatis plus 也没有达到我心中的预期。
回想这几年用的 JOOQ，直接用 Java 写 SQL 的体验太棒了。它实现的 DSL 完备度很高，几乎和写原生的 SQL 体验差不多了。
那 mybatis 生态有没有类似于这样的框架呢？还真巧了，官方还真就有一个叫 Mybatis-dynamic-SQL 项目。而本文是记录我在集成 Mybatis dynamic SQL、Mybatis Generator 时的一些历程。
整个项目我已经放在 Github （Mybatis-Dynamic-SQL-integration-demo） ，如果你感兴趣可以点个 star，我会持续更新。
观察维度 在开始实际写代码体验之前，我列了四个维度来观察框架是否能符合自己的期望，它们分别是
 Mybatis 生态兼容性 代码生成能力 无 XML DSL 完备度  下面一个一个来过一下
一、Mybatis 生态兼容性
就是要和 Mybatis 既有的生态保持兼容性，比如一些 SQL 日志插件、分页查询插件以及通用的 TypeHandler，二级缓存等
二、代码生成能力
数据库实体可以自动生成，开发者不需要（通常也不允许）修改这一部分自动生成的代码，但开发者可以通过配置项来灵活的制定生成规则以便扩展。
要是代码生成工具能和构建工具（比如 Maven、Gradle）无缝集成那就更好。
三、无 XML
零 XML
四、DSL 完备度（Domain Special Language）
既然是用 Java 的方式来写 SQL，那框架就得对常用的 SQL 有完善的支持，对不常用的 SQL 也能有相应的解决方案。</description>
    </item>
    
  </channel>
</rss>
